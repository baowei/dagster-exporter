# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
# set true when deploy partition daemon, thus 'Deployment' will use [Recreate] strategy.
recreate_on_start: false

image:
  repository: "ghcr.io/baowei/dagster-exporter"
  tag: "latest"
  pullPolicy: Always

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  # HTTP Port
  port: "8000"

container:
  port: "8000"

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

app:
  vars:
    GRAPHQL_ENDPOINT: 'https://default-dagster.example.com/graphql'
    QUERY_INTERVAL: 300
    SLEEP_INTERVAL: 60

serviceMonitor:
  # When set true then use a ServiceMonitor to configure scraping
  enabled: true
  # Set the namespace the ServiceMonitor should be deployed
  # Set how frequently Prometheus should scrape
  interval: 30s
  # Set path to telemtery-path
  telemetryPath: /metrics
  # Set timeout for scrape
  timeout: 10s
  # Set relabel_configs as per https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
  # relabelings: []
  # Set of labels to transfer on the Kubernetes Service onto the target.
  # targetLabels: []
  # metricRelabelings: []
